@using Blazor_Backgammon.ViewModels
@using Blazor_Backgammon.DataModels

@page "/backgammon"
@inject BackgammonViewModel viewModel

<header></header>
<body>

    <h1 class="welcome">Welcome to Backgammon</h1>

    <div class="container-board">
    
        <div class="game-board-top">
            @for(int index = 0; index < viewModel.HalfFieldSpaces; index++)
            {
                @if(index % 2 == 0)
                {
                    <div class="darkgreen-top field">
                        @foreach(var playerChip in viewModel.GetPlayerChipsAtIndex(index))
                        {
                            <div @onclick="() => viewModel.MoveChip(playerChip)" 
                                class="chip @("player" + playerChip.Player.ToString() + 
                                (playerChip.IsSelected? " isSelected" : "") + 
                                (playerChip.IsMoveOption? " moveOption" : ""))">
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="darkmaroon-top field">
                        @foreach(var playerChip in viewModel.GetPlayerChipsAtIndex(index))
                        {
                            <div @onclick="() => viewModel.MoveChip(playerChip)"
                                class="chip @("player" + playerChip.Player.ToString() + 
                                (playerChip.IsSelected? " isSelected" : "") + 
                                (playerChip.IsMoveOption? " moveOption" : ""))">
                            </div>
                        }
                    </div>
                }

                @if(index == 5)
                {
                    <div class="field middle-top">
                        @foreach(var chip in viewModel.RemovedList)
                        {
                            if(chip.Player == Player.One)
                            {
                                <div @onclick="() => viewModel.ReturnRemoved(chip)"
                                    class="chip @("player" + chip.Player.ToString() +
                                    (chip.IsSelected? " isSelected" : ""))">
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>

    </div>
    <div class="container-board">
    
        <div class="game-board-bottom">
            @for(int index = viewModel.HalfFieldSpaces; index < viewModel.TotalFieldSpaces; index++)
            {
                @if(index % 2 == 0)
                {
                    <div class="darkgreen-bottom field">
                        @foreach(var playerChip in viewModel.GetPlayerChipsAtIndex(index))
                        {
                            <div @onclick="() => viewModel.MoveChip(playerChip)"
                                class="chip @(("player" + playerChip.Player.ToString()) + 
                                (playerChip.IsSelected? " isSelected" : "") + 
                                (playerChip.IsMoveOption? " moveOption" : ""))">
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="darkmaroon-bottom field">
                        @foreach(var playerChip in viewModel.GetPlayerChipsAtIndex(index))
                        {
                            <div @onclick="() => viewModel.MoveChip(playerChip)"
                                class="chip @("player" + playerChip.Player.ToString() +
                                (playerChip.IsSelected? " isSelected" : "") + 
                                (playerChip.IsMoveOption? " moveOption" : ""))">
                            </div>
                        }
                    </div>
                }
                @if(index == 17)
                {
                    <div class="field middle-bottom">
                        @foreach(var chip in viewModel.RemovedList)
                        {
                            if(chip.Player == Player.Two)
                            {
                                <div @onclick="() => viewModel.ReturnRemoved(chip)"
                                    class="chip @("player" + chip.Player.ToString() + 
                                    (chip.IsSelected? " isSelected" : ""))">
                                </div>
                            }
                        }
                    </div>
                }
            }
        </div>

    </div>

    <button class="test" @onclick="() => viewModel.StartGame()">Start Game</button>
    <button class="rollDiceButton @(viewModel.HideButton?"hide":"")" 
    @onclick="() => viewModel.RollDice()">@(viewModel.ActivePlayer == Player.One? "Player 1" : "Player 2") Roll Dice</button>
    <div>
        @foreach(var number in viewModel.DiceNumbers)
        {
            <div class="dice">@number</div>
        }
    </div>
</body>



@code {

}
